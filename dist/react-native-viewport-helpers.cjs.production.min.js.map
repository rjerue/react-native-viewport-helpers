{"version":3,"file":"react-native-viewport-helpers.cjs.production.min.js","sources":["../src/index.tsx","../src/observer.tsx","../src/nativeObserver.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  EffectCallback,\n  useCallback,\n} from 'react';\nimport { observe } from './observer';\n\nexport function useIsInViewPortEffect(\n  ref: React.MutableRefObject<View | HTMLDivElement | null>,\n  onVisible: EffectCallback = () => {},\n  dependencies: any[] = [],\n  disabled = false,\n  delay = 500\n) {\n  const [interval, setVPInverval] = useState<NodeJS.Timeout | null>(null);\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n  const clear = useCallback(() => {\n    if (interval) {\n      clearInterval(interval);\n    }\n    setInterval(null);\n  }, []);\n  useLayoutEffect(() => {\n    if (disabled) {\n      return clear;\n    }\n    setVPInverval(\n      setInterval(() => {\n        if (!ref.current) {\n          return;\n        }\n        observe(ref.current, isVisible, setIsVisible);\n      }, delay)\n    );\n    return clear;\n  }, [ref, disabled, delay, ...dependencies]);\n\n  useEffect(() => {\n    if (isVisible) {\n      const effect = onVisible();\n      return effect;\n    }\n  }, [isVisible]);\n  return isVisible;\n}\n","import { View } from 'react-native';\nimport { nativeObserve } from './nativeObserver';\n\nexport const observe = (\n  ref: Element | View,\n  isVisible: boolean,\n  setIsVisible: (isVisible: () => boolean) => void\n) => {\n  nativeObserve(ref as View, isVisible, setIsVisible);\n};\n","import { View, Dimensions } from 'react-native';\n\nexport const nativeObserve = (\n  ref: View,\n  wasVisible: boolean,\n  setIsVisible: (isVisible: () => boolean) => void\n) => {\n  (ref as View).measure((_x, _y, width, height, pageX, pageY) => {\n    const state = {\n      rectTop: pageY,\n      rectBottom: pageY + height,\n      rectWidth: pageX + width,\n    };\n    const window = Dimensions.get('screen');\n    const isVisible =\n      state.rectBottom !== 0 &&\n      state.rectTop >= 0 &&\n      state.rectBottom <= window.height &&\n      state.rectWidth > 0 &&\n      state.rectWidth <= window.width;\n    if (wasVisible !== isVisible) {\n      setIsVisible(() => isVisible);\n    }\n  });\n};\n"],"names":["ref","onVisible","dependencies","disabled","delay","useState","interval","setVPInverval","isVisible","setIsVisible","clear","useCallback","clearInterval","setInterval","useLayoutEffect","current","wasVisible","measure","_x","_y","width","height","pageX","pageY","state","window","Dimensions","get","nativeObserve","observe","useEffect"],"mappings":"qGAYEA,EACAC,EACAC,EACAC,EACAC,YAHAH,IAAAA,EAA4B,uBAC5BC,IAAAA,EAAsB,aACtBC,IAAAA,GAAW,YACXC,IAAAA,EAAQ,WAE0BC,WAAgC,MAA3DC,OAAUC,SACiBF,YAAkB,GAA7CG,OAAWC,OACZC,EAAQC,cAAY,WACpBL,GACFM,cAAcN,GAEhBO,YAAY,OACX,WACHC,kBAAgB,kBACVX,EACKO,GAETH,EACEM,YAAY,WACLb,EAAIe,SC7BM,SACrBf,EACAQ,EACAC,ICJ2B,SAC3BT,EACAgB,EACAP,GAECT,EAAaiB,QAAQ,SAACC,EAAIC,EAAIC,EAAOC,EAAQC,EAAOC,OAC7CC,EACKD,EADLC,EAEQD,EAAQF,EAFhBG,EAGOF,EAAQF,EAEfK,EAASC,aAAWC,IAAI,UACxBnB,EACiB,IAArBgB,GACAA,GAAiB,GACjBA,GAAoBC,EAAOJ,QAC3BG,EAAkB,GAClBA,GAAmBC,EAAOL,MACxBJ,IAAeR,GACjBC,EAAa,kBAAMD,MDbvBoB,CAAc5B,EAAaQ,EAAWC,GD2BhCoB,CAAQ7B,EAAIe,QAASP,EAAWC,IAC/BL,IAEEM,KACLV,EAAKG,EAAUC,UAAUF,IAE7B4B,YAAU,cACJtB,SACaP,KAGhB,CAACO,IACGA"}